name: A workflow for docker deploy ci
on: push
jobs:
  build:
    name: Docker deploy action
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: generate config
      if: success()
      run: |
        echo "#generate config:"
        cd ./docker-deploy
        bash generate_config.sh
        echo "#check output:"
        ls ./outputs
        cd ../
#      - uses: ./action-dockerdeploy
#        with:
#          MY_NAME: "Mona"

    - name: docker deploy
      if: success()
      run: |
        # get host ip
        ifconfig eth0 | grep "inet" | grep -v inet6 | awk '{ print $2}' 
        # ifconfig eth0 | grep "inet" | grep -v inet6 | awk '{ print $2}' | cut -d "/" -f1
        
        echo "#docker-compose begin"
        cd ./docker-deploy
        dir=/data/projects/fate
        target_party_id=10000
        target_party_ip=`ifconfig eth0 | grep "inet" | grep -v inet6 | awk '{ print $2}' `
        sudo mkdir -p $dir
        ls -l ../$dir

        echo "#deploy party"
        rm -f $dir/confs-$target_party_id.tar
        sudo cp ./outputs/confs-$target_party_id.tar $dir/
        rm -f ./outputs/confs-$target_party_id.tar
        echo "$target_party_ip training cluster copy is ok!"

        cd $dir
        tar -xzf confs-$target_party_id.tar
        cd confs-$target_party_id
        docker-compose down
        docker volume rm -f confs-${target_party_id}_shared_dir_examples
        docker volume rm -f confs-${target_party_id}_shared_dir_federatedml
        docker-compose up -d
        cd ../
        rm -f confs-${target_party_id}.tar
        echo "party ${target_party_id} deploy is ok!"
        
        echo "deploy serving"
        rm -f $dir/serving-$target_party_id.tar
        sudo cp ./outputs/serving-$target_party_id.tar $dir/
        rm -f ./outputs/serving-$target_party_id.tar
        echo "party $target_party_id serving cluster copy is ok!"

        cd $dir
        tar -xzf serving-$target_party_id.tar
        cd serving-$target_party_id
        docker-compose down
        docker-compose up -d
        cd ../
        rm -f serving-$target_party_id.tar
        echo "party $target_party_id serving cluster deploy is ok!"

        # echo "#replace scp with cp, delete ssh"
        # cp docker_deploy.sh docker_deploy.sh.bk
        # sed -i "s/scp \${/cp \${/g" docker_deploy.sh
        # sed -i "/eeooff/d" docker_deploy.sh
    
        # echo "#Run deploy shell"
        # bash docker_deploy.sh all

        echo "#Check containers"
        docker ps

        echo "#Run toy_example"
        docker exec -it confs-10000_python_1 bash
        cd /data/projects/fate/python/examples/toy_example/
        python run_toy_example.py 10000 1000 1